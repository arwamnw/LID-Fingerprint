This is modified from Sparse Basic Linear Algebra Subprograms (SPBLAS)
Library (http://math.nist.gov/spblas/).

We used spblas for sparse matrix multiplications in our kprop algorithm:
	A*B=C where A is sparse, and B and C are dense matrices.

A sample program test.cc. To compile, use:
    g++ -c nist_spblas.cc
    g++ test.cc nist_spblas.o -o test
To run:
    ./test
/*************************************************************************/
#include "nist_spblas.h"
using namespace NIST_SPBLAS;
using namespace std;
int main()
{
    FSp_mat A(3,5); /* float sparse matrix */
    A.insert_entry(3.0F, 1, 3);
    A.insert_entry(4.0F, 1, 4);
    A.insert_entry(7.0F, 2, 1);
    A.insert_entry(8.0F, 2, 2);
    A.insert_entry(9.0F, 2, 3);
    A.end_construction();
    A.print();
    cout << A.num_rows() << endl;
    cout << A.num_cols() << endl;

    float B[20] =  {1.00F, 2.00F, 3.00F, 4.00F,
                    5.00F, 6.00F, 7.00F, 8.00F,
                    9.00F, 10.0F, 11.0F, 12.0F,
                    13.0F, 14.0F, 15.0F, 16.0F,
                    17.0F, 18.0F, 19.0F, 20.0F};

    float C[12] =  {0.0F, 0.0F, 0.0F, 0.0F,
                    0.0F, 0.0F, 0.0F, 0.0F,
                    0.0F, 0.0F, 0.0F, 0.0F};
    /* multiplication C = A*B */
    A.usmm(blas_rowmajor, blas_no_trans, 4, 1.0F, B, 4 , C, 4 );
    /*                                   ^           ^      ^
     *                                    \         /       |
     *                                  #(columns of B)  #(column of C)
     */
    cout << endl;

    for (int i = 0; i < 3; i ++)
    {
        for (int j = 0; j < 4; j ++)
        {
            cout << C[i*4+j] << " ";
        }
        cout << endl;
    }
    return 0;
}
/*************************************************************************/




Jichao Sun (js87@njit.edu)
Last modified: Feb 23, 2012


